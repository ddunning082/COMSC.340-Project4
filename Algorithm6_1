package algorithm6_1;

import java.util.PriorityQueue;
import java.util.Scanner;
	

class Algorithm6_1() 
{	
	int maxProfit; 
	
	class Node implements Comparable<Node>
	{
		int level;
        int profit;
        int weight;
        float bound;
        
        @Override
        public int compareTo(Node other) 
        {
            return Float.compare(other.bound, this.bound);
        }
	}

void knapsack2(int n, int p[], int w[], int W) 
{
	PriorityQueue<Node> P = new PriorityQueue();
	Node u, v;
	
	v = new Node();
	v.level = 0;
	v.profit = 0;
	v.weight = 0;
	v.bound = bound(v,n,p,w,W);
	P.add(v);
	
	while (!PQ.isEmpty()) 
	{
        v = PQ.poll();
        if (v.bound > maxprofit[0]) 
        {
            u = new Node();
            u.level = v.level + 1;
            u.weight = v.weight + w[u.level];
            u.profit = v.profit + p[u.level];
        }

            if (u.weight <= W && u.profit > maxprofit[0])
            {
                maxprofit[0] = u.profit;
            }

            u.bound = bound(u, n, p, w, W);
            if (u.bound > maxprofit[0]) 
            {
                PQ.add(u);
            }
            
            u = new Node();
            u.weight = v.weight;
            u.profit = v.profit;
            u.bound = bound(u, n, p, w, W);
            if (u.bound > maxprofit[0]) 
            {
                PQ.add(u);
            }
        }
}

public float bound(Node u, int n, int[] p, int[] w, int W) 
{
    int j, k;
    int totweight;
    float result;

    if (u.weight >= W)
        return 0;

    result = u.profit;
    j = u.level + 1;
    totweight = u.weight;

    while (j < n && totweight + w[j] <= W) 
    {
        totweight += w[j];
        result += p[j];
        j++;
    }

    k = j;
    if (k < n)
        result += (W - totweight) * ((float) p[k] / w[k]);

    return result;
	}


public static void main(String[] args) 
{
	Algorithm6_1 knapsack = new Algorithm6_1();
	int n = 4;
	int W = 16;
	int[] w = {40, 30, 50, 10};
	int[] p = {2, 5, 10, 5};
	
	knapsack.knapsack2(n, p, w, W);
	
	System.out.println("There was a total profit of " + maxProfit);
    System.out.println("The items selected were ");
    System.out.println("Number of nodes visited was ");

}
}
